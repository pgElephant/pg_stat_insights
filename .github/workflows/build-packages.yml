name: Build Packages

on:
  workflow_dispatch:
    inputs:
      pg_versions:
        description: 'PostgreSQL versions to build (comma-separated, e.g., 16,17,18)'
        required: true
        default: '16,17,18'
        type: string
      create_release:
        description: 'Create GitHub release with packages'
        required: false
        default: false
        type: boolean
      release_tag:
        description: 'Release tag (e.g., REL_1_0, v1.0.0)'
        required: false
        default: 'REL_1_0'
        type: string

jobs:
  prepare:
    name: Prepare Build Matrix
    runs-on: ubuntu-latest
    outputs:
      pg_versions: ${{ steps.parse.outputs.pg_versions }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Parse PostgreSQL versions
        id: parse
        run: |
          echo "pg_versions=$(echo '${{ github.event.inputs.pg_versions }}' | jq -Rc 'split(",") | map(gsub(" "; ""))')" >> $GITHUB_OUTPUT
      
      - name: Extract version
        id: version
        run: |
          VERSION=$(grep 'default_version' pg_stat_insights.control | cut -d"'" -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extension version: $VERSION"

  build-rpm:
    name: RPM
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        pg_version: ${{ fromJson(needs.prepare.outputs.pg_versions) }}
    uses: ./.github/workflows/reusable-build-rpm.yml
    with:
      pg_version: ${{ matrix.pg_version }}
      package_version: ${{ needs.prepare.outputs.version }}

  build-deb:
    name: DEB
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        pg_version: ${{ fromJson(needs.prepare.outputs.pg_versions) }}
    uses: ./.github/workflows/reusable-build-deb.yml
    with:
      pg_version: ${{ matrix.pg_version }}
      package_version: ${{ needs.prepare.outputs.version }}

  test:
    name: Test
    needs: [build-rpm, build-deb]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        type: [rpm, deb]
        pg_version: ['17']
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.type }}-pg${{ matrix.pg_version }}
          path: ./pkg
      
      - name: Test RPM
        if: matrix.type == 'rpm'
        run: |
          docker run --rm -v $PWD/pkg:/pkg rockylinux:9 bash -c "
            # Install PostgreSQL repository
            ARCH=\$(uname -m)
            dnf install -y --nogpgcheck https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-\${ARCH}/pgdg-redhat-repo-latest.noarch.rpm
            dnf -qy module disable postgresql
            dnf install -y --nogpgcheck postgresql${{ matrix.pg_version }}-server
            # Install pg_stat_insights package
            dnf install -y --nogpgcheck /pkg/pg_stat_insights_${{ matrix.pg_version }}-*.rpm
            # Verify installation
            rpm -q pg_stat_insights_${{ matrix.pg_version }}
            ls -l /usr/pgsql-${{ matrix.pg_version }}/lib/pg_stat_insights.so
            ls -l /usr/pgsql-${{ matrix.pg_version }}/share/extension/pg_stat_insights*
            echo '✅ RPM test passed'
          "
      
      - name: Test DEB
        if: matrix.type == 'deb'
        run: |
          docker run --rm -v $PWD/pkg:/pkg -e DEBIAN_FRONTEND=noninteractive ubuntu:22.04 bash -c "
            # Install PostgreSQL repository
            apt-get update
            apt-get install -y wget gnupg2 lsb-release
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /usr/share/keyrings/postgresql.gpg
            echo 'deb [signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt jammy-pgdg main' > /etc/apt/sources.list.d/pgdg.list
            apt-get update
            # Install PostgreSQL
            apt-get install -y postgresql-${{ matrix.pg_version }}
            # Install pg_stat_insights package
            dpkg -i /pkg/postgresql-${{ matrix.pg_version }}-pg-stat-insights*.deb
            # Verify installation
            dpkg -l | grep pg-stat-insights
            ls -l /usr/lib/postgresql/${{ matrix.pg_version }}/lib/pg_stat_insights.so
            ls -l /usr/share/postgresql/${{ matrix.pg_version }}/extension/pg_stat_insights*
            echo '✅ DEB test passed'
          "

  release:
    name: Create Release
    needs: [prepare, test]
    if: github.event.inputs.create_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Organize packages
        run: |
          mkdir -p release
          find artifacts -name '*.rpm' -exec cp {} release/ \;
          find artifacts -name '*.deb' -exec cp {} release/ \;
          cd release && sha256sum *.rpm *.deb > SHA256SUMS
          ls -lh
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: pg_stat_insights ${{ needs.prepare.outputs.version }}
          files: release/*
          body: |
            ## pg_stat_insights ${{ needs.prepare.outputs.version }}
            
            Advanced PostgreSQL query performance monitoring extension.
            
            ### Features
            - 52 comprehensive metrics across 11 pre-built views
            - Track execution time, cache hits, WAL generation, JIT stats
            - Drop-in replacement for pg_stat_statements with enhanced analytics
            - PostgreSQL 16, 17, 18 support
            
            ### Installation
            
            **RPM (RHEL/Rocky/AlmaLinux 9):**
            ```bash
            sudo dnf install pg_stat_insights_17-${{ needs.prepare.outputs.version }}-1.el9.x86_64.rpm
            ```
            
            **DEB (Ubuntu 22.04+):**
            ```bash
            sudo apt install ./postgresql-17-pg-stat-insights_${{ needs.prepare.outputs.version }}-1_amd64.deb
            ```
            
            ### Quick Start
            ```sql
            -- Add to postgresql.conf
            shared_preload_libraries = 'pg_stat_insights'
            
            -- Restart PostgreSQL, then:
            CREATE EXTENSION pg_stat_insights;
            
            -- View top slow queries
            SELECT * FROM pg_stat_insights_top_slow_queries LIMIT 10;
            ```
            
            ### Checksums
            See `SHA256SUMS` file for package checksums.

