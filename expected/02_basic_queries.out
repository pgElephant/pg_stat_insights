-- ============================================================================
-- Test 2: Basic Query Tracking
-- Tests that queries are tracked and statistics are collected
-- ============================================================================
-- Reset statistics to start fresh
SELECT pg_stat_insights_reset();
 pg_stat_insights_reset 
------------------------
 
(1 row)

-- Execute some test queries
CREATE TEMP TABLE test_table (id int, name text, value numeric);
INSERT INTO test_table VALUES (1, 'test1', 100.5);
INSERT INTO test_table VALUES (2, 'test2', 200.75);
INSERT INTO test_table VALUES (3, 'test3', 300.25);
-- Simple SELECT
SELECT * FROM test_table WHERE id = 1;
 id | name  | value 
----+-------+-------
  1 | test1 | 100.5
(1 row)

-- Aggregation
SELECT COUNT(*), SUM(value), AVG(value) FROM test_table;
 count |  sum   |         avg          
-------+--------+----------------------
     3 | 601.50 | 200.5000000000000000
(1 row)

-- Join (self-join)
SELECT a.id, a.name, b.value 
FROM test_table a 
JOIN test_table b ON a.id = b.id 
WHERE a.id <= 2;
 id | name  | value  
----+-------+--------
  1 | test1 |  100.5
  2 | test2 | 200.75
(2 rows)

-- Wait a moment for stats to be collected
SELECT pg_sleep(0.1);
 pg_sleep 
----------
 
(1 row)

-- Verify that queries are being tracked
SELECT COUNT(*) > 0 AS queries_tracked FROM pg_stat_insights;
 queries_tracked 
-----------------
 t
(1 row)

-- Check that we have execution statistics
SELECT 
  COUNT(*) FILTER (WHERE calls > 0) AS queries_with_calls,
  COUNT(*) FILTER (WHERE total_exec_time > 0) AS queries_with_time,
  COUNT(*) FILTER (WHERE rows >= 0) AS queries_with_rows
FROM pg_stat_insights;
 queries_with_calls | queries_with_time | queries_with_rows 
--------------------+-------------------+-------------------
                  8 |                 8 |                 8
(1 row)

-- Verify basic statistics are reasonable
SELECT 
  calls >= 1 AS has_calls,
  total_exec_time >= 0 AS has_exec_time,
  mean_exec_time >= 0 AS has_mean_time,
  min_exec_time >= 0 AS has_min_time,
  max_exec_time >= min_exec_time AS max_gte_min
FROM pg_stat_insights
WHERE query LIKE '%test_table%'
LIMIT 1;
 has_calls | has_exec_time | has_mean_time | has_min_time | max_gte_min 
-----------+---------------+---------------+--------------+-------------
 t         | t             | t             | t            | t
(1 row)

